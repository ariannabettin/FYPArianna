#include "validplan.h"
#include "ui_validplan.h"
#include "gloabal.h"
#include "selection.h"
#include <QFile>
#include <QTextStream>
#include <QMessageBox>

//Validate window shows the validation report and allows the user to export the XPlan.

validPlan::validPlan(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::validPlan)
{
    ui->setupUi(this);
    this->setFixedSize(800,600);

    //set red colour for components of the tracking bar in the left corner of the window.
    /*Reference to the code:
     * How to Change the Background Color of QWidget - Using Style Sheet. (2018).Qt Wiki.
     Available at: https://wiki.qt.io/How_to_Change_the_Background_Color_of_QWidget.*/
    ui->homeButton->setStyleSheet("background-color:#ad2b2b; color: #FFFFFF");
    ui->selectButton->setStyleSheet("background-color:#ad2b2b; color: #FFFFFF");
    ui->visualiseButton->setStyleSheet("background-color:#ad2b2b; color: #FFFFFF");
    ui->compareButton->setStyleSheet("background-color:#ad2b2b; color: #FFFFFF");
    ui->validatePlan->setStyleSheet("background-color:#ad2b2b; color: #FFFFFF");
    ui->conf1Label->setText(" ");
    ui->conf2Label->setText(" ");
    ui->conf3Label->setText(" ");

    //the themeColor value determines the theme that will be applied to the current window.
    /*Reference to the code:
     * How to Change the Background Color of QWidget - Using Style Sheet. (2018).Qt Wiki.
     Available at: https://wiki.qt.io/How_to_Change_the_Background_Color_of_QWidget.*/
    if(themeColor == "white"){

        ui->exportButton->setStyleSheet("background-color: #25245e; color: #FFFFFF;");

        ui->reportLabel->setStyleSheet("background-color: #c6c3dd; color: #282827;");

        ui->renameLine->setStyleSheet("background-color: #c6c3dd; color: #282827;""border: 1px solid #3b2baf;""height: 25px;");



    }else if(themeColor == "black"){

        ui->exportButton->setStyleSheet("background-color: #498AA0; color: #FFFFFF;");

        ui->reportLabel->setStyleSheet("background-color: #92afd3; color: #3E4C5E;");

        ui->renameLine->setStyleSheet("background-color: #92afd3; color: #000000;""border: 1px solid #cdd1d6;""height: 25px;");


    }

    /*Code which displays the content of the validation report generated by an external validator tool.
    START ->*/
    QFile file("ValidationReport.txt");
    if(!file.open(QFile::ReadOnly | QFile::Text)){
        QMessageBox::information(this, "Error: ", "Not file found");
    }
    QTextStream in(&file);
    QString text = in.readAll();
    ui->reportLabel->setText(text);
    file.close();
    //<- END.
}


validPlan::~validPlan()
{
    delete ui;
}

//Tracking bar component which links the current window with the Home window.
void validPlan::on_homeButton_clicked()
{
    numItems = 0;
     // [*]
    if(route == 1){
        QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget();
        parent->show();
    }else if(route == 2){
        QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget();
        parent->show();
    }else{
        QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget();
        parent->show();
    }
    this->hide();

}

//Tracking bar component which links the current window with the Select window.
void validPlan::on_selectButton_clicked()
{
    numItems = 0;
     // [*]
    if(route == 1){
       QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget();
       parent->show();
    }else if(route == 2){
       QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget();
       parent->show();
    }else{
       QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget();
       parent->show();
    }
     this->hide();

}

//Tracking bar component which links the current window with the Visualise window.
void validPlan::on_visualiseButton_clicked()
{
     // [*]
    if(route == 1){
       QWidget *parent = this->parentWidget()->parentWidget()->parentWidget();
       parent->show();
    }else if(route == 2){
       QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget()->parentWidget();
       parent->show();
    }else{
       QWidget *parent = this->parentWidget()->parentWidget()->parentWidget()->parentWidget();
       parent->show();
    }
     this->hide();
}

//Tracking bar component which links the current window with the Compare window.
void validPlan::on_compareButton_clicked()
{
     // [*]
    if(route == 1){
        QWidget *parent = this->parentWidget();
        parent->show();
    }else if(route == 2){
        QWidget *parent = this->parentWidget();
        parent->show();
    }else{
        QWidget *parent = this->parentWidget();
        parent->show();
    }
     this->hide();
}

//Button which links the current window with the previous window, in this case Compare Window.
void validPlan::on_backButton_clicked()
{
     // [*]
    QWidget *parent = this->parentWidget();
    parent->show();
     this->hide();
}

/*Button which saves the XPlan in a new file named by the user. If the user does not give a name,
a default one will be assigned.*/
void validPlan::on_exportButton_clicked()
{
     QString filename;

    //if the edit line is empty the default is generated by the following code...
    if(ui->renameLine->text().isEmpty()){
        QString number = QString::number(fileNameNumber);
        filename = "newXPlan(" + number + ").txt";
        QMessageBox::information(this,"Information:","Be aware that if you save using the default name and you already have other files from previous session, those will be overwritten.");
        fileNameNumber++;
    }else{
        //... otherwise the name typed by the user is used.
        filename = ui->renameLine->text() + ".txt";
    }

    //labels which inform the user about the given name.
    ui->conf1Label->setText("Your plan has been saved in ");
    ui->conf2Label->setText("the project directory as: ");
    ui->conf3Label->setText(filename);

    //"Plan" variable is updated.
    /*Code which displays the content of the file. Taken from:
     * C++ Qt 12 - QFile. (2011). [video] Directed by VoidRealms.
    https://www.youtube.com/watch?v=4Mg6bw1MmAE&t=134s: YouTube.*/
    QFile file(filename);
    if(!file.open(QFile::WriteOnly | QFile::Text)){
    }
    QTextStream out(&file);
    QString text = Plan;
    out<< text;

    file.flush();
    file.close();
}
